@page "/compingresos"
@using BaseLibrary.DTOs.Documentos
@using Client.Components

<PageTitle>Ingresos</PageTitle>

<h2>Ingresos</h2>

<div style="display: table; table-layout: fixed; width: 100%;">
    <div style="overflow-x: auto;">
        <FluentDataGrid Items="@FilteredIngresos"
                        ResizableColumns="true"
                        Pagination="@_pagination"
                        HeaderCellAsButtonWithMenu="true"
                        ColumnResizeLabels="@_customLabels"
                        Style="min-width: max-content">
            <PropertyColumn Property="@(d => d.NroDoc)"
                            Sortable="true"
                            Filtered="!string.IsNullOrWhiteSpace(_codFilter)"
                            Tooltip="true"
                            Width="20%"
                            Align="Align.Center"
                            Title="Numero del Documento">
                <ColumnOptions>
                    <div class="search-box">
                        <FluentSearch Autofocus="true"
                                      @bind-Value=_codFilter
                                      @oninput="HandleCodFilter"
                                      @bind-Value:after="HandleClear"
                                      Placeholder="Ingrese el numero del documento..."
                                      Style="width: 100%"
                                      Label="Filtro">
                        </FluentSearch>
                    </div>
                </ColumnOptions>
            </PropertyColumn>

            <PropertyColumn Property="@(d => d.Nombre)"
                            Sortable="true"
                            Filtered="!string.IsNullOrWhiteSpace(_nameFilter)"
                            Tooltip="true"
                            Width="20%"
                            Title="Nombre del Documento">
                <ColumnOptions>
                    <div class="search-box">
                        <FluentSearch Autofocus="true"
                                      @bind-Value=_nameFilter
                                      @oninput="HandleNameFilter"
                                      @bind-Value:after="HandleClear"
                                      Placeholder="Ingrese el nombre del documento..."
                                      Style="width: 100%"
                                      Label="Filtro">
                        </FluentSearch>
                    </div>
                </ColumnOptions>
            </PropertyColumn>

            <PropertyColumn Property="@(d => d.FechaDoc)"
                            Sortable="true"
                            Width="15%"
                            Title="Fecha del Documento"/>

            <PropertyColumn Property="@(d => d.Importe)"
                            Sortable="true"
                            Width="15%"
                            Title="Importe Total"/>

            <PropertyColumn Property="@(d => d.Moneda)"
                            Sortable="true"
                            Width="15%"
                            Title="Moneda"/>

            <TemplateColumn Align="Align.Center" Width="15%" Title="Opciones">
                <FluentButton Id="@(context.NroDoc!.Insert(0, "E"))" IconStart="@(new Icons.Regular.Size20.Edit())" @onclick="@(() => HandleEditar(context))"></FluentButton>
                <FluentTooltip Anchor="@(context.NroDoc!.Insert(0, "E"))" HideTooltipOnCursorLeave="true" Position="TooltipPosition.Bottom" Delay=200>
                    Editar
                </FluentTooltip>

                <FluentButton Id="@(context.NroDoc!.Insert(0, "B"))" IconStart="@(new Icons.Regular.Size20.Delete())" @onclick="@(() => HandleBorrar(context))"></FluentButton>
                <FluentTooltip Anchor="@(context.NroDoc!.Insert(0, "B"))" HideTooltipOnCursorLeave="true" Position="TooltipPosition.Bottom" Delay=200>
                    Borrar
                </FluentTooltip>
            </TemplateColumn>
        </FluentDataGrid>
    </div>
</div>

<FluentPaginator State="@_pagination"/>

<FluentStack Orientation="Orientation.Horizontal" Style="margin-top: 1rem">
    <FluentButton IconStart="@(new Icons.Regular.Size20.ArrowCounterclockwise())"
                  @onclick="ReloadTableAsync"
                  Loading="@_isLoading"
                  Style="margin-right: 1rem">
        Recargar Tabla
    </FluentButton>
    <FluentButton IconStart="@(new Icons.Color.Size20.AddCircle())"
                  @onclick="@OpenCreateDialogAsync"
                  Disabled="@_isLoading">
        Registrar Nuevo Ingreso
    </FluentButton>
</FluentStack>

@code {
    private IEnumerable<DocumentoDto>? _documentosIngreso;
    private readonly PaginationState _pagination = new PaginationState();
    private readonly ColumnResizeLabels _customLabels = new ColumnResizeLabels();
    private string _codFilter = string.Empty;
    private string _nameFilter = string.Empty;
    private bool _isLoading;

    IQueryable<DocumentoDto> FilteredIngresos
    {
        get
        {
            if (_documentosIngreso is null)
            {
                return Enumerable.Empty<DocumentoDto>().AsQueryable();
            }

            var query = _documentosIngreso.AsQueryable();
            if (!string.IsNullOrEmpty(_codFilter))
            {
                query = query.Where(di => di.NroDoc!.Contains(_codFilter, StringComparison.CurrentCultureIgnoreCase));
            }

            if (!string.IsNullOrEmpty(_nameFilter))
            {
                query = query.Where(di => di.Nombre!.Contains(_nameFilter, StringComparison.CurrentCultureIgnoreCase));
            }

            return query;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (_documentosIngreso is null)
        {
            await ReloadTableAsync();
        }
    }

    //Table Methods
    private async Task ReloadTableAsync()
    {
        _isLoading = true;
        StateHasChanged();
        await GetDocumentosIngresoAsync();
    }

    private async Task GetDocumentosIngresoAsync()
    {
        var result = await DocumentoService.GetAllDocumentos();
        _documentosIngreso = result;
        _isLoading = false;
        StateHasChanged();
    }

    private void HandleCodFilter(ChangeEventArgs e)
    {
        if (e.Value is string value)
        {
            _codFilter = value;
        }
    }

    private void HandleNameFilter(ChangeEventArgs e)
    {
        if (e.Value is string value)
        {
            _nameFilter = value;
        }
    }

    private void HandleClear()
    {
        _codFilter = string.Empty;
        _nameFilter = string.Empty;
    }

    //Button Methods
    private async Task OpenCreateDialogAsync()
    {

    }
    
    private async Task HandleEditar(DocumentoDto documento)
    {
        var parameters = new DialogParameters
        {
            { "Documento", documento }
        };

    }
    
    private async Task HandleBorrar(DocumentoDto item)
    {
        var parameters = new DialogParameters()
        {
            Title = "Eliminar Ingreso",
            Width = "400px",
            TrapFocus = true,
            Modal = false,
            PreventScroll = true
        };

        List<string> message = new List<string>();
        message.Insert(0,"¿Estas seguro que deseas eliminar el Plan de Cuenta?");
        message.Insert(1,$"Codigo: {item.NroDoc}");
        message.Insert(2,$"Nombre: {item.Nombre}");
        message.Insert(3,"Esta acción no se puede deshacer.");
        
        var dialog = await DialogService.ShowDialogAsync<GenericDialogBool>(message, parameters);
        DialogResult result = await dialog.Result;
        
        if (result.Data is not null && (bool) result.Data)
        {
            var response = await DocumentoService.DeleteDocumento(item.NroDoc!);
            if (response.Flag)
            {
                ToastService.ShowSuccess(response.Message);
                await GetDocumentosIngresoAsync();
            }
            else
            {
                ToastService.ShowError(response.Message);
            }
        }
    }
}