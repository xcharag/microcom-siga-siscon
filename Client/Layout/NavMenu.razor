@using BaseLibrary.DTOs.Menu
<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">
            <h6 style="color: ghostwhite"> Microcom - SISCON</h6>
        </a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@FullNavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column" style="margin: 1rem">
        <FluentStack Orientation="Orientation.Horizontal">
            <FluentNavMenu>
                @if (_menus != null) 
                { 
                    @foreach (var menu in _menus) 
                    {
                        <FluentNavGroup Id="@menu.MenuName" Title="@menu.MenuName" Icon="@(GetIconFromName(menu.IconName))" Class="nav-item">
                            @if (menu.MenuItems != null)
                            {
                                @foreach(var menuItem in menu.MenuItems)
                                {
                                    @if (LastBlock < menuItem.Block)
                                    {
                                        LastBlock = menuItem.Block;
                                        <FluentDivider />
                                    }
                                    <FluentNavLink Id="@menuItem.Name" Icon="@(new Icons.Regular.Size24.Add())" Href="@menuItem.Url">
                                        @menuItem.Name
                                    </FluentNavLink>
                                    <FluentTooltip
                                        Anchor="@menuItem.Name"
                                        HideTooltipOnCursorLeave="true"
                                        Position="TooltipPosition.End"
                                        Delay=200>
                                        @menuItem.Name
                                    </FluentTooltip>
                                }
                            }
                        </FluentNavGroup>
                    }
                }
            </FluentNavMenu>
        </FluentStack>
    </nav>
</div>

@code {
    private bool _collapseNavMenu = true;
    public int? LastBlock = 1;
    private IEnumerable<MenusCreation>? _menus;

    private string FullNavMenuCssClass => $"nav-scrollable {(_collapseNavMenu ? "collapse" : "")}";

    private void ToggleNavMenu()
    {
        _collapseNavMenu = !_collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        await GetMenuItems();
    }

    private async Task GetMenuItems()
    {
        _menus = await MenuNavService.GetAllMenus();
    }
    
    private Icon GetIconFromName(string? iconName)
    {
        return iconName switch
        {
            "home" => new Icons.Regular.Size28.Home(),
            "add" => new Icons.Regular.Size20.Add(),
            "Settings" => new Icons.Filled.Size28.Settings(),
            "Receipt" => new Icons.Filled.Size28.Receipt(),
            "List" => new Icons.Filled.Size28.List(),
            // Add more mappings as needed
            _ => new Icons.Filled.Size20.BookDefault() // Default icon if no match is found
        };
    }
}