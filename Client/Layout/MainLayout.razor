@using Microsoft.AspNetCore.Authorization
@inherits LayoutComponentBase

@attribute [Authorize]
<FluentToastProvider/>
<FluentDialogProvider/>
<FluentTooltipProvider/>
<FluentMessageBarProvider/>
<FluentMenuProvider/>

<AuthorizeView>
    <Authorized>
        <div class="page">
            <div class="sidebar">
                <NavMenu User="context.User"/>
            </div>

            <main>
                <div class="top-row px-4">
                    <div @onclick="@(() => _open = !_open)" style="cursor: pointer;">
                        <FluentPersona Id="UserCard" Name="@context.User.Identity!.Name"
                                       Status="PresenceStatus.Available"
                                       StatusSize="PresenceBadgeSize.Small"
                                       StatusTitle="Online"
                                       Image="@(new Icons.Regular.Size48.Person().ToDataUri(size:"25px", color:"white"))"
                                       ImageSize="40px">
                        </FluentPersona>
                    </div>
                    
                    <FluentMenu Anchor="UserCard" @bind-Open="_open">
                        <FluentMenuItem OnClick="OptionClicked">
                            <FluentIcon Value="@(new Icons.Regular.Size24.Options())"/>
                            <span>Configuración</span>
                        </FluentMenuItem>
                        
                        <FluentDivider/>
                        
                        <FluentMenuItem OnClick="LogoutClicked">
                            <FluentIcon Value="@(new Icons.Regular.Size24.SignOut())"/>
                            <span>Cerrar Sesión</span>
                        </FluentMenuItem>
                    </FluentMenu>
                    
                </div>

                <article class="content px-4">
                    @Body
                </article>
            </main>
        </div>
    </Authorized>
    
    <NotAuthorized>
        @{
            NavManager.NavigateTo($"/login?returnUrl={Uri.EscapeDataString(NavManager.Uri)}");
        }
    </NotAuthorized>
</AuthorizeView>

@code
{
    bool _open = false;
    
    async Task LogoutClicked()
    {
        var logoutModel = new UserSession();
        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(logoutModel);
        NavManager.NavigateTo("/", forceLoad: true, replace: false);
    }
    
    void OptionClicked()
    {
        NavManager.NavigateTo("/user/options", forceLoad: true, replace: false);
    }
}
