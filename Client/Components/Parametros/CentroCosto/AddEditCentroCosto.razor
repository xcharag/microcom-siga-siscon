@implements IDialogContentComponent<CentroCostoDto>

<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(GetIcon())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>
    <FluentEditForm Model="@CentroCostoModelo" OnValidSubmit="HandleCreateAsync">
        <DataAnnotationsValidator />

        <FluentStack Orientation="Orientation.Vertical">
            <FluentGrid Spacing=2 Justify="JustifyContent.FlexStart" AdaptiveRendering="true" Style="padding: 6px">

                <FluentGridItem sm="12" Style="padding-right: 12px">
                    <FluentTextField @bind-Value=CentroCostoModelo!.CodCc Style="width: 100%" Placeholder="Codigo del Centro de Costo..." Label="Codigo del Centro de Costo"/>
                    <FluentValidationMessage For="@(() => CentroCostoModelo!.CodCc)"/>
                </FluentGridItem>

                <FluentGridItem sm="10" Style="padding-right: 12px">
                    <FluentTextField @bind-Value=CentroCostoModelo!.NomCc Placeholder="Nombre del Centro de Costo..." Label="Nombre del Centro de Costo" Style="width: 100%"/>
                    <FluentValidationMessage For="@(() => CentroCostoModelo!.NomCc)"/>
                </FluentGridItem>

                <FluentGridItem sm="8" Style="padding-right: 12px">
                    <FluentTextField @bind-Value=CentroCostoModelo!.NomResp Placeholder="Nombre del Responsable..." Label="Nombre del Responsable" Style="width: 100%"/>
                    <FluentValidationMessage For="@(() => CentroCostoModelo!.NomResp)"/>
                </FluentGridItem>
            </FluentGrid>
        </FluentStack>

        <FluentDialogFooter>
            <FluentButton Appearance="Appearance.Accent"
                          IconStart="new Icons.Regular.Size20.Save()"
                          Type="ButtonType.Submit">
                @(_editMode ? "Actualizar y Cerrar" : "Crear y Cerrar")
            </FluentButton>
            <FluentButton Appearance="Appearance.Neutral"
                          IconStart="new Icons.Regular.Size20.PresenceBlocked()"
                          OnClick="@CancelAsync">
                Cancelar
            </FluentButton>
        </FluentDialogFooter>
    </FluentEditForm>
</FluentDialogBody>

@code {
    [Parameter] public CentroCostoDto Content { get; set; } = default!;
    [CascadingParameter] public FluentDialog Dialog { get; set; } = default!;
    
    CentroCostoDto? CentroCostoModelo { get; set; } = new CentroCostoDto();
    bool _editMode;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (Content.NomCc is not null)
        {
            CentroCostoModelo = Content;
            _editMode = true;
        }
    }
    
    //Form
    private async Task HandleCreateAsync()
    {

        if (!_editMode)
        {
            var response = await CentroCostoService.Create(CentroCostoModelo!, "api/CentroCosto");
            if (!response!.Flag)
            {
                ToastService.ShowError(response.Message);
                return;
            }
            ToastService.ShowSuccess(response.Message);
            await Dialog.CloseAsync(response.Message);
            return;
        }
        var responseEdit = await CentroCostoService.Update(CentroCostoModelo!, "api/CentroCosto");
        if (!responseEdit.Flag)
        {
            ToastService.ShowError(responseEdit.Message);
            return;
        }
        ToastService.ShowSuccess(responseEdit.Message);
        await Dialog.CloseAsync(responseEdit);
        return;
    }
    private async Task CancelAsync()
    {
        await Dialog.CloseAsync();
    }
    

    private Icon GetIcon()
    {
        if (_editMode)
        {
            return new Icons.Filled.Size20.Edit();
        }
        return new Icons.Regular.Size20.New();
    }
}