@page "/plancuentas"
@using BaseLibrary.DTOs.PlanCta
@using Client.Components.PlanCuentas
@inject IGrupoService GrupoService

<PageTitle>Plan de Cuentas</PageTitle>

<h2>Plan de Cuentas</h2>

<div style="display: table; table-layout: fixed; width: 100%;">
    <div style="overflow-x: auto;">
        <FluentDataGrid Items="@FilteredItems"
                        ResizableColumns="true"
                        Pagination="@_pagination"
                        HeaderCellAsButtonWithMenu="true"
                        ColumnResizeLabels="@_customLabels"
                        Style="min-width: max-content">
            <PropertyColumn Property="@(p => p.CodCuenta)"
                            Sortable="true"
                            Filtered="!string.IsNullOrWhiteSpace(_codFilter)"
                            Tooltip="true"
                            Title="Codigo Cuenta">
                <ColumnOptions>
                    <div class="search-box">
                        <FluentSearch Autofocus="true"
                                      @bind-Value=_codFilter
                                      @oninput="HandleCodCuentaFilter"
                                      @bind-Value:after="HandleClear"
                                      Placeholder="Codigo de Cuenta..."
                                      Style="width: 100%"
                                      Label="Filtro">
                        </FluentSearch>
                    </div>
                </ColumnOptions>
            </PropertyColumn>

            <PropertyColumn Property="@(p => p.NomCuenta)"
                            Sortable="true"
                            Filtered="!string.IsNullOrWhiteSpace(_nameFilter)"
                            Tooltip="true"
                            Title="Nombre Cuenta">
                <ColumnOptions>
                    <div class="search-box">
                        <FluentSearch Autofocus="true"
                                      @bind-Value=_nameFilter
                                      @oninput="HandleNameCuentaFilter"
                                      @bind-Value:after="HandleClear"
                                      Placeholder="Nombre de Cuenta..."
                                      Style="width: 100%"
                                      Label="Filtro">
                        </FluentSearch>
                    </div>
                </ColumnOptions>
            </PropertyColumn>
            <PropertyColumn Property="@(p => p.Moneda)" Sortable="true" Align="Align.Center"/>
            <PropertyColumn Property="@(p => p.TipoCuenta)" Sortable="true" Align="Align.Center"/>
            <PropertyColumn Property="@(p=>p.Grupo)" Sortable="true" Align="Align.Center"/>
            <TemplateColumn Align="Align.Center" Title="Opciones">
                <FluentButton Id="EditarButton" IconStart="@(new Icons.Regular.Size24.Edit())" @onclick="@(() => HandleEditar(context))"></FluentButton>
                <FluentTooltip Anchor="EditarButton" HideTooltipOnCursorLeave="true" Position="TooltipPosition.Bottom" Delay=200>
                    Editar
                </FluentTooltip>
                
                <FluentButton Id="BorrarButton" IconStart="@(new Icons.Regular.Size20.Delete())" @onclick="@(() => HandleBorrar(context))"></FluentButton>
                <FluentTooltip Anchor="BorrarButton" HideTooltipOnCursorLeave="true" Position="TooltipPosition.Bottom" Delay=200>
                    Borrar
                </FluentTooltip>
            </TemplateColumn>
        </FluentDataGrid>
    </div>
</div>

<FluentPaginator State="@_pagination"></FluentPaginator>

<FluentButton IconStart="@(new Icons.Regular.Size20.ArrowCounterclockwise())"
              Appearance="Appearance.Accent"
              @onclick="ReloadTableAsync"
              Loading="@_loading"
              Style="margin-top: 1rem;">
    Recargar Tabla
</FluentButton>


<FluentStack Orientation="Orientation.Horizontal" Style="margin-top: 4rem">
    <FluentButton IconStart="@(new Icons.Color.Size20.AddCircle())"
                  Appearance="Appearance.Accent"
                  @onclick="@OpenCreateDialogAsync">Crear Nueva Cuenta</FluentButton>
</FluentStack>

@code {
    private IQueryable<PlanCuentaDto>? _planesDeCuentas;
    private List<PlanCuenta>? _planesDeCuentasLista ;
    private List<Grupo>? _grupos;
    bool _loading;
    readonly PaginationState _pagination = new PaginationState();
    string _nameFilter = string.Empty;
    string _codFilter = string.Empty;

    readonly ColumnResizeLabels _customLabels = ColumnResizeLabels.Default with { DiscreteLabel = "Ancho (+/- 10px)", ResetAriaLabel = "Restaurar" };

    IQueryable<PlanCuentaDto>? FilteredItems
    {
        get
        {
            var result = _planesDeCuentas;
            if (result is not null && !string.IsNullOrEmpty(_codFilter))
            {
                result = result.Where(x => x.CodCuenta!.ToString().Contains(_codFilter, StringComparison.CurrentCultureIgnoreCase));
            }
            
            if (result is not null && !string.IsNullOrEmpty(_nameFilter))
            {
                result = result.Where(x => x.NomCuenta!.Contains(_nameFilter, StringComparison.CurrentCultureIgnoreCase));
            }
            
            return result;
        }
    }
    
    //Crear y Visualizar
    protected override async Task OnInitializedAsync()
    {
        if (_planesDeCuentas == null)
        {
            await GetPlanesDeCuentas();
        }
    }
    private async Task GetPlanesDeCuentas()
    {
        var result = await PlanCuentaService.GetAll("api/PlanCuenta");
        if (result is not null)
        {
            _loading = false;
            _planesDeCuentas = result.AsQueryable();
            StateHasChanged();
        }
    }
    private async Task GetGrupos()
    {
        var result = await GrupoService.GetAll("api/Grupo");
        if (result is not null)
        {
            _grupos = result.ToList();
            StateHasChanged();
        }
    }
    private async Task OpenCreateDialogAsync()
    {
        DialogParameters parameters = new DialogParameters()
        {
            Title = "Nuevo Plan de Cuenta",
            Width = "600px",
            TrapFocus = true,
            Modal = false,
            PreventScroll = true
        };
        
        _planesDeCuentasLista = _planesDeCuentas?.Select(dto => new PlanCuenta()
        {
            CodCuenta = dto.CodCuenta,
            NomCuenta = dto.NomCuenta,
            Moneda = dto.Moneda,
            TipoCuenta = dto.TipoCuenta,
            Nivel = dto.Nivel,
            Grupo = dto.Grupo
        }).ToList() ?? new List<PlanCuenta>();

        await GetGrupos();
        
        var planCuenta = new CrearPlanCuenta()
        {
            ListaGrupos = _grupos,
            PlanCuentasCompletas = _planesDeCuentasLista
        };

        var dialog = await DialogService.ShowDialogAsync<AddEditDialog>(planCuenta,parameters);
        DialogResult result = await dialog.Result;
        
        if (result.Data is not null)
        {
            await GetPlanesDeCuentas();
        }
    }
    
    //Filtros
    private void HandleCodCuentaFilter(ChangeEventArgs e)
    {
        if (e.Value is string value)
        {
            _codFilter = value;
        }
    }
    private void HandleNameCuentaFilter(ChangeEventArgs e)
    {
        if (e.Value is string value)
        {
            _nameFilter = value;
        }
    }
    private void HandleClear()
    {
        _codFilter = string.IsNullOrWhiteSpace(_codFilter) ? string.Empty : _codFilter;
        _nameFilter = string.IsNullOrWhiteSpace(_nameFilter) ? string.Empty : _nameFilter;
    }
    private async Task ReloadTableAsync()
    {
        _loading = true;
        await GetPlanesDeCuentas();
    }
    
    //Editar y Borrar
    private async Task HandleEditar(PlanCuentaDto item)
    {
        DialogParameters parameters = new DialogParameters()
        {
            Title = "Editar Plan de Cuenta",
            Width = "600px",
            TrapFocus = true,
            Modal = false,
            PreventScroll = true
        };
        
        var planCuenta = new CrearPlanCuenta()
        {
            PlanCuenta = item,
            ListaGrupos = _grupos,
            PlanCuentasCompletas = _planesDeCuentasLista
        };
        
        var dialog = await DialogService.ShowDialogAsync<AddEditDialog>(planCuenta,parameters);
        DialogResult result = await dialog.Result;
        
        if (result.Data is not null)
        {
            await GetPlanesDeCuentas();
        }
    }
    private async Task HandleBorrar(PlanCuentaDto item)
    {
        var result = await PlanCuentaService.Delete(item.CodCuenta, "api/PlanCuenta");
        if (result is not null)
        {
            await GetPlanesDeCuentas();
        }
    }
}