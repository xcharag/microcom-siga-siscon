@using BaseLibrary.DTOs.Parametros.Banco
@implements IDialogContentComponent<BancoDto>

<FluentDialogHeader>
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(GetIcon())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>
    <FluentEditForm Model="@Content" OnValidSubmit="HandleCreateAsync">
        <DataAnnotationsValidator />

        <FluentStack Orientation="Orientation.Vertical">
            <FluentGrid Spacing=2 Justify="JustifyContent.FlexStart" AdaptiveRendering="true" Style="padding: 6px">
                <FluentGridItem sm="12" Style="padding-right: 12px">
                    <FluentTextField @bind-Value=Content.CodBanco Style="width: 100%" Placeholder="Codigo de Banco..." Label="Codigo de Banco" />
                    <FluentValidationMessage For="@(() => Content.CodBanco)" />
                </FluentGridItem>

                <FluentGridItem sm="12" Style="padding-right: 12px">
                    <FluentTextField @bind-Value=Content.NomBanco Placeholder="Nombre de Banco..." Label="Nombre de Banco" Style="width: 100%" />
                    <FluentValidationMessage For="@(() => Content.NomBanco)" />
                </FluentGridItem>

                <FluentGridItem sm="12" Style="padding-right: 12px">
                    <FluentCombobox Label="Moneda" Items="@_monedas" @bind-Value="Content.Moneda" Placeholder="Moneda del Banco" Autocomplete="ComboboxAutocomplete.Inline" />
                    <FluentValidationMessage For="@(() => Content.Moneda)" />
                </FluentGridItem>
            </FluentGrid>
        </FluentStack>

        <FluentDialogFooter>
            <FluentButton Appearance="Appearance.Accent"
                          IconStart="new Icons.Filled.Size20.Save()"
                          Type="ButtonType.Submit">
                Guardar
            </FluentButton>
            <FluentButton Appearance="Appearance.Light"
                          IconStart="new Icons.Filled.Size20.Cancel()"
                          OnClick="Dialog.Close">
                Cancelar
            </FluentButton>
        </FluentDialogFooter>
    </FluentEditForm>
</FluentDialogBody>

@code {
    [Parameter] public BancoDto? Content { get; set; }
    [CascadingParameter] public FluentDialog Dialog { get; set; } = default!;
    bool _editMode = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (Content is not null)
        {
            _editMode = true;
        }
    }
    
    //Form
    private async Task HandleCreateAsync()
    {
        var bancoEntitie = new Banco()
        {
            CodBanco = Content!.CodBanco,
            NomBanco = Content.NomBanco,
            Moneda = Content.Moneda,
            PlanCuentaCodCuenta = Content.PlanCuentaCodCuenta
        };
        
        
    }
    

    private Icon GetIcon()
    {
        if (_editMode)
        {
            return new Icons.Filled.Size20.Edit();
        }
        return new Icons.Regular.Size20.New();
    }
}