@using BaseLibrary.DTOs.PlanCta
@implements IDialogContentComponent<CrearBanco>

<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(GetIcon())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>
    <FluentEditForm Model="@BancoModelo" OnValidSubmit="HandleCreateAsync">
        <DataAnnotationsValidator />

        <FluentStack Orientation="Orientation.Vertical">
            <FluentGrid Spacing=2 Justify="JustifyContent.FlexStart" AdaptiveRendering="true" Style="padding: 6px">
                
                <FluentGridItem sm="1" Justify="JustifyContent.Center" Style="align-items: center">
                    <FluentButton Id="SearchButton" Type="ButtonType.Button" IconStart="@(new Icons.Regular.Size28.Search())" OnClick="@SearchPlanCuenta"/>
                    <FluentTooltip Anchor="SearchButton">
                        <FluentLabel Typo="Typography.Body">Buscar Plan Cuenta</FluentLabel>
                    </FluentTooltip>
                </FluentGridItem>

                <FluentGridItem sm="11" Style="padding-right: 12px">
                    <FluentNumberField @bind-Value=BancoModelo!.CodBanco Disabled="@_codDisabled" Style="width: 100%" Placeholder="Codigo de Banco..." Label="Codigo de Banco"/>
                    <FluentValidationMessage For="@(() => BancoModelo!.CodBanco)"/>
                </FluentGridItem>

                <FluentGridItem sm="6" Style="padding-right: 12px">
                    <FluentTextField @bind-Value=BancoModelo!.NomBanco Placeholder="Nombre de Banco..." Label="Nombre de Banco" Style="width: 100%"/>
                    <FluentValidationMessage For="@(() => BancoModelo!.NomBanco)"/>
                </FluentGridItem>

                <FluentGridItem sm="6" Style="padding-right: 12px">
                    <FluentTextField @bind-Value=BancoModelo!.PlanCuenta Disabled="@_codDisabled" Placeholder="Codigo de la Cuenta..." Label="Codigo de la Cuenta" Style="width: 100%"/>
                    <FluentValidationMessage For="@(() => BancoModelo!.PlanCuenta)"/>
                </FluentGridItem>

                <FluentGridItem sm="12" Style="padding-right: 12px">
                    <FluentCombobox Label="Moneda" Items="@_monedas" @bind-Value="BancoModelo!.Moneda" Placeholder="Moneda del Banco" Autocomplete="ComboboxAutocomplete.Inline"/>
                    <FluentValidationMessage For="@(() => BancoModelo!.Moneda)"/>
                </FluentGridItem>
            </FluentGrid>
        </FluentStack>

        <FluentDialogFooter>
            <FluentButton Appearance="Appearance.Accent"
                          IconStart="new Icons.Regular.Size20.Save()"
                          Type="ButtonType.Submit">
                @(_editMode ? "Actualizar y Cerrar" : "Crear y Cerrar")
            </FluentButton>
            <FluentButton Appearance="Appearance.Neutral"
                          IconStart="new Icons.Regular.Size20.PresenceBlocked()"
                          OnClick="@CancelAsync">
                Cancelar
            </FluentButton>
        </FluentDialogFooter>
    </FluentEditForm>
</FluentDialogBody>

@code {
    [Parameter] public CrearBanco Content { get; set; } = default!;
    [CascadingParameter] public FluentDialog Dialog { get; set; } = default!;
    
    BancoDto? BancoModelo { get; set; } = new BancoDto();
    bool _editMode;
    bool _codDisabled = false;
    readonly List<string> _monedas = ["Bolivianos", "Dolares"];

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (Content.BancoDto is not null)
        {
            BancoModelo = new BancoDto()
            {
                CodBanco = Content.BancoDto.CodBanco,
                NomBanco = Content.BancoDto.NomBanco,
                Moneda = Content.BancoDto.Moneda,
                PlanCuenta = Content.BancoDto.PlanCuenta
            };
            if (Content.IsEditMode)
            {
                _editMode = Content.IsEditMode;
                _codDisabled = Content.IsEditMode;
            }
        }
    }
    
    //Form
    private async Task HandleCreateAsync()
    {

        if (!_editMode)
        {
            var response = await BancoService.Create(BancoModelo!, "api/Banco");
            if (!response!.Flag)
            {
                ToastService.ShowError(response.Message);
                return;
            }
            ToastService.ShowSuccess(response.Message);
            await Dialog.CloseAsync(response.Message);
            return;
        }
        var responseEdit = await BancoService.Update(BancoModelo!, "api/Banco");
        if (!responseEdit.Flag)
        {
            ToastService.ShowError(responseEdit.Message);
            return;
        }
        ToastService.ShowSuccess(responseEdit.Message);
        await Dialog.CloseAsync(responseEdit);
        return;
    }
    private async Task CancelAsync()
    {
        await Dialog.CloseAsync();
    }
    private async Task SearchPlanCuenta()
    {
        var parameters = new DialogParameters()
        {
            Title = "Seleccionar Plan Cuenta",
            Width = "800px",
            Height = "620px",
            TrapFocus = false,
            Modal = true,
            PreventScroll = true
        };
        
        var planCuentaListEntities = await PlanCuentaService.GetAll("api/PlanCuenta");
        if (planCuentaListEntities is null)
        {
            ToastService.ShowError("No se pudo obtener la lista de Plan de Cuentas");
            return;
        }

        var planCuentaListDto = planCuentaListEntities.Select(dto => new PlanCuenta()
        {
            CodCuenta = dto.CodCuenta,
            NomCuenta = dto.NomCuenta,
            Moneda = dto.Moneda,
            TipoCuenta = dto.TipoCuenta,
            Nivel = dto.Nivel,
            Grupo = dto.Grupo
        }).ToList() ?? new List<PlanCuenta>();
        
        var selectPlanCuentas = new SelectPlanCuentas
        {
            PlanCuentasCompletas = planCuentaListDto,
            TipoCuenta = "Detalle"
        };
        
        var dialog = await DialogService.ShowDialogAsync<SelectPlanCuentaDialog>(selectPlanCuentas, parameters);
        DialogResult result = await dialog.Result;
        
        if (result.Data is not null)
        {
            PlanCuentaDto? cuentaSelected = result.Data as PlanCuentaDto;
            if (cuentaSelected!.CodCuenta != null)
            {
                var codigoGenerado = await BancoService.GenerateCodBanco(cuentaSelected.CodCuenta, "api/Banco");
                if (codigoGenerado.Flag)
                {
                    ToastService.ShowSuccess("Codigo de Banco generado correctamente");
                    BancoModelo!.CodBanco = int.Parse(codigoGenerado.Message);
                    BancoModelo!.PlanCuenta = cuentaSelected.CodCuenta;
                    _codDisabled = true;
                    return;
                }
                ToastService.ShowError(codigoGenerado.Message);
            }
        }
    }
    

    private Icon GetIcon()
    {
        if (_editMode)
        {
            return new Icons.Filled.Size20.Edit();
        }
        return new Icons.Regular.Size20.New();
    }
}