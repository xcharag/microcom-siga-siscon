@page "/proveedores"
@using Client.Components
@using Client.Components.Parametros.Proveedor

<PageTitle>Proveedores</PageTitle>

<h2>Proveedores</h2>

<div style="display: table; table-layout: fixed; width: 100%;">
    <div style="overflow-x: auto;">
        <FluentDataGrid Items="@FilteredProveedores"
                        ResizableColumns="true"
                        Pagination="@_pagination"
                        HeaderCellAsButtonWithMenu="true"
                        ColumnResizeLabels="@_customLabels"
                        Style="min-width: max-content">
            <PropertyColumn Property="@(p => p.CodProveedor)"
                            Sortable="true"
                            Filtered="!string.IsNullOrWhiteSpace(_codFilter)"
                            Tooltip="true"
                            Width="15%"
                            Align="Align.Center"
                            Title="Codigo">
                <ColumnOptions>
                    <div class="search-box">
                        <FluentSearch Autofocus="true"
                                      @bind-Value=_codFilter
                                      @oninput="HandleCodProveedorFilter"
                                      @bind-Value:after="HandleClear"
                                      Placeholder="Codigo de Proveedor..."
                                      Style="width: 100%"
                                      Label="Filtro">
                        </FluentSearch>
                    </div>
                </ColumnOptions>
            </PropertyColumn>

            <PropertyColumn Property="@(p => p.NomProv)"
                            Sortable="true"
                            Filtered="!string.IsNullOrWhiteSpace(_nameFilter)"
                            Tooltip="true"
                            Width="18%"
                            Title="Nombre de Proveedor">
                <ColumnOptions>
                    <div class="search-box">
                        <FluentSearch Autofocus="true"
                                      @bind-Value=_nameFilter
                                      @oninput="HandleNomProveedorFilter"
                                      @bind-Value:after="HandleClear"
                                      Placeholder="Nombre de Proveedor..."
                                      Style="width: 100%"
                                      Label="Filtro">
                        </FluentSearch>
                    </div>
                </ColumnOptions>
            </PropertyColumn>

            <PropertyColumn Property="@(p => p.TelProv)"
                            Sortable="true"
                            Width="10%"
                            Title="Telefono"/>

            <PropertyColumn Property="@(p => p.TipoDoc)"
                            Sortable="true"
                            Width="15%"
                            Title="Tipo de Documento"/>

            <PropertyColumn Property="@(p => p.NroDoc)"
                            Sortable="true"
                            Width="17%"
                            Title="Numero de Documento"/>

            <PropertyColumn Property="@(p => p.PlanCuentaCodCuenta)"
                            Sortable="true"
                            Width="15%"
                            Title="Cuenta por Pagar"/>

            <TemplateColumn Align="Align.Center" Width="10%" Title="Opciones">
                <FluentButton IconStart="@(new Icons.Regular.Size20.Edit())"
                              @onclick="() => HandleEditar(context)">
                </FluentButton>
                <FluentTooltip Anchor="@(context.CodProveedor!.ToString())" Position="TooltipPosition.Bottom">
                    Editar
                </FluentTooltip>

                <FluentButton IconStart="@(new Icons.Regular.Size20.Delete())"
                              @onclick="() => HandleBorrar(context)">
                </FluentButton>
                <FluentTooltip Anchor="@(context.CodProveedor!.ToString())" Position="TooltipPosition.Bottom">
                    Eliminar
                </FluentTooltip>
            </TemplateColumn>
        </FluentDataGrid>
    </div>
</div>


<FluentPaginator State="@_pagination"></FluentPaginator>

<FluentStack Orientation="Orientation.Horizontal" Style="margin-top: 1rem">
    <FluentButton IconStart="@(new Icons.Regular.Size20.ArrowCounterclockwise())"
                  Appearance="Appearance.Accent"
                  @onclick="ReloadTableAsync"
                  Loading="@_loading">
        Recargar Tabla
    </FluentButton>

    <FluentButton IconStart="@(new Icons.Color.Size20.AddCircle())"
                  Appearance="Appearance.Accent"
                  @onclick="OpenCreateDialogAsync">
        Crear Nuevo
    </FluentButton>
</FluentStack>

@code {
    private IEnumerable<ProveedorDto>? _proveedores;
    private string _codFilter = string.Empty;
    private string _nameFilter = string.Empty;
    private bool _loading = false;
    private readonly PaginationState _pagination = new PaginationState();
    readonly ColumnResizeLabels _customLabels = ColumnResizeLabels.Default with { DiscreteLabel = "Ancho (+/- 10px)", ResetAriaLabel = "Restaurar" };

    IQueryable<ProveedorDto>? FilteredProveedores
    {
        get
        {
            if (_proveedores == null)
            {
                return Enumerable.Empty<ProveedorDto>().AsQueryable();
            }

            var result = _proveedores.AsQueryable();
            if (!string.IsNullOrEmpty(_codFilter))
            {
                result = result.Where(p => p.CodProveedor!.ToString()!.Contains(_codFilter, StringComparison.CurrentCultureIgnoreCase));
            }
            if (!string.IsNullOrEmpty(_nameFilter))
            {
                result = result.Where(p => p.NomProv!.Contains(_nameFilter, StringComparison.CurrentCultureIgnoreCase));
            }
            return result;
        }
    }

    private async Task ReloadTableAsync()
    {
        _loading = true;
        _proveedores = await ProveedorService.GetAll("api/Proveedor");
        _loading = false;
        StateHasChanged();
    }

    private void HandleCodProveedorFilter(ChangeEventArgs e)
    {
        if (e.Value is string value)
        {
            _codFilter = value;
        }
    }

    private void HandleNomProveedorFilter(ChangeEventArgs e)
    {
        if (e.Value is string value)
        {
            _nameFilter = value;
        }
    }

    private void HandleClear()
    {
        _codFilter = string.Empty;
        _nameFilter = string.Empty;
    }

    private async Task OpenCreateDialogAsync()
    {
        var dialog = await DialogService.ShowDialogAsync<AddEditDialogProveedor>(new ProveedorDto(), new DialogParameters { Title = "Crear Nuevo Proveedor", Width = "600px" });
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await ReloadTableAsync();
        }
    }

    private async Task HandleEditar(ProveedorDto proveedor)
    {
        var dialog = await DialogService.ShowDialogAsync<AddEditDialogProveedor>(proveedor, new DialogParameters { Title = "Editar Proveedor", Width = "600px" });
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await ReloadTableAsync();
        }
    }

    private async Task HandleBorrar(ProveedorDto proveedor)
    {
        List<string> message = new List<string>
        {
            "¿Está seguro que desea eliminar el proveedor?",
            $"Nombre: {proveedor.NomProv}",
            $"Código: {proveedor.CodProveedor}",
            "Esta acción no se puede deshacer."
        };
        var dialog = await DialogService.ShowDialogAsync<GenericDialogBool>(message, new DialogParameters { Title = "Eliminar Proveedor", Width = "400px" });
        var result = await dialog.Result;
        if (result.Data is not null && (bool)result.Data)
        {
            var response = await ProveedorService.Delete((int)proveedor.CodProveedor!, "api/Proveedor");
            if (response.Flag)
            {
                ToastService.ShowSuccess(response.Message);
                await ReloadTableAsync();
            }
            else
            {
                ToastService.ShowError(response.Message);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (_proveedores is null)
        {
            await ReloadTableAsync();
        }
    }
}
