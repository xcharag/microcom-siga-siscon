@page "/centrocosto"
@using Client.Components
@using Client.Components.Parametros.CentroCosto

<PageTitle>Centro de Costos</PageTitle>

<h2>CentroCosto</h2>

<GenericDataGrid TItem="CentroCostoDto"
                 Items="@_centrosCostos"
                 ItemsQueryable="_centrosCostos?.AsQueryable()"
                 OnEdit="HandleEditar"
                 OnDelete="HandleBorrar"
                 TipoItem="CentroCostoDto"
                 Pagination="@_pagination"/>

<FluentStack Orientation="Orientation.Horizontal" Style="margin-top: 1rem">
    <FluentButton IconStart="@(new Icons.Regular.Size20.ArrowCounterclockwise())"
                  Appearance="Appearance.Accent"
                  @onclick="ReloadTableAsync"
                  Loading="@_loading">
        Recargar Tabla
    </FluentButton>

    <FluentButton IconStart="@(new Icons.Color.Size20.AddCircle())"
                  Appearance="Appearance.Accent"
                  @onclick="@OpenCreateDialogAsync">
        Crear Nuevo
    </FluentButton>
</FluentStack>

@code {
    private IEnumerable<CentroCostoDto>? _centrosCostos;
    private readonly PaginationState _pagination = new PaginationState();
    bool _loading;
    
    //Table Buttons
    private async Task HandleEditar(CentroCostoDto centroCosto)
    {
        DialogParameters parameters = new DialogParameters()
        {
            Title = "Editar Centro de Costo",
            Width = "600px",
            TrapFocus = true,
            Modal = false,
            PreventScroll = true
        };
        
        var dialog = await DialogService.ShowDialogAsync<AddEditCentroCosto>(centroCosto, parameters);
        DialogResult result = await dialog.Result;
        
        if (!result.Cancelled)
        {
            await ReloadTableAsync();
            _loading = false;
        }
        _loading = false;
    }
    private async Task HandleBorrar(CentroCostoDto centroCostoDto)
    {
        DialogParameters parameters = new DialogParameters()
        {
            Title = "Eliminar Centro de Costo",
            Width = "400px",
            TrapFocus = true,
            Modal = false,
            PreventScroll = true
        };
        
        List<string> message = new List<string>();
        message.Insert(0,"¿Estas seguro que deseas eliminar el Centro de Costo?");
        message.Insert(1,$"Codigo: {centroCostoDto.CodCc}");
        message.Insert(2,$"Nombre: {centroCostoDto.NomCc}");
        message.Insert(3,"Esta acción no se puede deshacer.");
        
        var dialog = await DialogService.ShowDialogAsync<GenericDialogBool>(message, parameters);
        DialogResult result = await dialog.Result;
        
        if (result.Data is not null && (bool) result.Data)
        {
            var response = await CentroCostoService.Delete(centroCostoDto.CodCc!, "api/CentroCosto");
            if (response.Flag)
            {
                ToastService.ShowSuccess(response.Message);
                await GetCentrosCostos();
            }
            else
            {
                ToastService.ShowError(response.Message);
            }
        }
    }
    private async Task OpenCreateDialogAsync()
    {
        DialogParameters parameters = new DialogParameters()
        {
            Title = "Crear Centro de Costo",
            Width = "600px",
            TrapFocus = true,
            Modal = false,
            PreventScroll = true
        };
        
        var centroCostoEmpty = new CentroCostoDto();
        
        var dialog = await DialogService.ShowDialogAsync<AddEditCentroCosto>(centroCostoEmpty, parameters);
        DialogResult result = await dialog.Result;
        
        if (!result.Cancelled)
        {
            await ReloadTableAsync();
        }
    }
    
    //Options
    private async Task ReloadTableAsync()
    {
        _loading = true;
        await GetCentrosCostos();
        _loading = false;
    }
    
    protected override async Task OnInitializedAsync()
    {
        if (_centrosCostos is null)
        {
            await GetCentrosCostos();
        }
    }
    private async Task GetCentrosCostos()
    {
        var centroCostos = await CentroCostoService.GetAll("api/CentroCosto");
        
        if (centroCostos is not null)
        {
            _centrosCostos = centroCostos;
        }
        StateHasChanged();
    }
}